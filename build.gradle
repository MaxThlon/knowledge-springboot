buildscript {
	ext {
		kotlinVersion = '1.3.20'
		springBootVersion = '2.1.2.RELEASE'
		gradleDockerComposeVersion = '0.8.13'
	}
	repositories {
		mavenCentral()
		jcenter()
	}
	dependencies {
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}"
    classpath "org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}"
		classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
		classpath "com.avast.gradle:gradle-docker-compose-plugin:${gradleDockerComposeVersion}"
    classpath 'org.hidetake:gradle-ssh-plugin:2.9.0'
	}
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'war'
apply plugin: 'docker-compose'
apply plugin: 'org.hidetake.ssh'

springBoot {
	buildInfo {
		properties {
			artifact = 'knowledge'
			version = '0.0.3'
			group = 'com.thlon'
			name = 'knowledge'
		}
	}
}

sourceCompatibility = '1.8'

repositories {
	mavenCentral()
}

ext {
	keycloakVersion = '4.8.3.Final'
}

dependencies {
  //implementation('org.slf4j:slf4j-jcl') //1.7.7
  implementation('org.jetbrains.kotlin:kotlin-stdlib-jdk8')
  implementation('org.jetbrains.kotlin:kotlin-reflect')
  //implementation('javax.inject:javax.inject:1')
  implementation('com.fasterxml.jackson.module:jackson-module-kotlin')

  //implementation('org.springframework.boot:spring-boot-starter-web')
  providedRuntime('org.springframework.boot:spring-boot-starter-tomcat')
  //implementation('org.springframework.boot:spring-boot-starter-data-jpa')
  implementation('org.springframework.boot:spring-boot-starter-security')
  implementation("org.springframework.boot:spring-boot-starter-websocket")
  implementation("org.springframework.security:spring-security-messaging")
  //implementation('org.springframework.boot:spring-boot-starter-thymeleaf')
  implementation('org.springframework.boot:spring-boot-starter-data-mongodb')
  //implementation('org.springframework.kafka:spring-kafka')

  implementation('com.h2database:h2')
  //implementation("org.keycloak:keycloak-spring-boot-starter:${keycloakVersion}")
  implementation("org.keycloak:keycloak-spring-security-adapter:${keycloakVersion}")

	testImplementation("org.springframework.boot:spring-boot-starter-test")
	/*testImplementation( "org.jetbrains.kotlin:kotlin-test")
	testImplementation("org.jetbrains.kotlin:kotlin-test-junit")
	testImplementation("io.kotlintest:kotlintest-extensions-spring:3.1.10")
	testImplementation('io.kotlintest:kotlintest-runner-junit5:3.1.10')
	testImplementation("org.junit.jupiter:junit-jupiter-api:5.3.1")
	testImplementation("org.junit.jupiter:junit-jupiter-engine:5.3.1")
*/
}

compileKotlin {
	kotlinOptions {
		freeCompilerArgs = ['-Xjsr305=strict']
		jvmTarget = '1.8'
	}
}

test {
  useJUnitPlatform()
}

compileTestKotlin {
	kotlinOptions {
		freeCompilerArgs = ['-Xjsr305=strict']
		jvmTarget = '1.8'
	}
}

dockerCompose {
	useComposeFiles = ['docker/thlon.yml']
}

springBoot {
	mainClassName = 'com.thlon.knowledge.ApplicationThlonKnowledge'
}

bootWar {
	excludeDevtools = false
}

remotes {
  MacMax {
    host = 'macmax'
    user = 'max'
    identity = file('/home/madmax/.ssh/id_rsa')
  }
}
/*
tasks.register ('bootWarToDebugServer', Copy) {
  group = 'Install'
	description = 'Install to debug server'

	dependsOn bootWar

  from jar // shortcut for createJar.outputs.files
  into '../servers_debug/spring_boot/'
}*/

tasks.register ('bootWarToMacmax') {
  group = 'Install'
	description = 'Install to debug server'

	dependsOn bootWar

  doLast {
    ssh.run {
      session(remotes.MacMax) {
        put from: 'build/libs/thlon_knowledge.war', into: '/srv/tomcat/tomcat/data'
      }
    }
  }
}
